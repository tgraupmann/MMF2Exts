#include "Common.h"
#include "Public/ChromaAnimationAPI.h"
#include <string>

using namespace ChromaSDK;
using namespace std;


int Extension::ExpIsInitialized()
{
	return CondIsInitialized();
}

int Extension::ExpInit()
{
	return CondInit();
}

int Extension::ExpGetRGB(int red, int green, int blue)
{
	if (CondIsInitialized())
	{
		int color = ChromaAnimationAPI::GetRGB(red, green, blue);
		return color;
	}
	else
	{
		return 0;
	}
}

int Extension::ExpGetIntDeviceType(const TCHAR* name)
{
	if (!_tcscmp(name, _T("ChromaLink")))
	{
		return 0;
	}
	if (!_tcscmp(name, _T("Headset")))
	{
		return 0;
	}
	if (!_tcscmp(name, _T("Keyboard")))
	{
		return 1;
	}
	if (!_tcscmp(name, _T("Keypad")))
	{
		return 1;
	}
	if (!_tcscmp(name, _T("Mouse")))
	{
		return 1;
	}
	if (!_tcscmp(name, _T("Mousepad")))
	{
		return 0;
	}
	return -1;
}

int Extension::ExpGetIntDevice(const TCHAR* name)
{
	if (!_tcscmp(name, _T("ChromaLink")))
	{
		return 0;
	}
	if (!_tcscmp(name, _T("Headset")))
	{
		return 1;
	}
	if (!_tcscmp(name, _T("Keyboard")))
	{
		return 0;
	}
	if (!_tcscmp(name, _T("Keypad")))
	{
		return 1;
	}
	if (!_tcscmp(name, _T("Mouse")))
	{
		return 2;
	}
	if (!_tcscmp(name, _T("Mousepad")))
	{
		return 2;
	}
	return -1;
}

int Extension::ExpGetFrameCountName(const TCHAR* path)
{
	if (CondIsInitialized())
	{
		basic_string<TCHAR> bsPath(path);
		string sPath(bsPath.begin(), bsPath.end());
		const char* cPath = sPath.c_str();

		return ChromaAnimationAPI::GetFrameCountName(cPath);
	}
	else
	{
		return 0;
	}
}

int Extension::ExpGetColorDataSize(const TCHAR* path)
{
	if (CondIsInitialized())
	{
		basic_string<TCHAR> bsPath(path);
		string sPath(bsPath.begin(), bsPath.end());
		const char* cPath = sPath.c_str();

		int maxLeds;
		int maxRow;
		int maxColumn;
		switch (ChromaAnimationAPI::GetDeviceTypeName(cPath))
		{
		case EChromaSDKDeviceTypeEnum::DE_1D:
			maxLeds = ChromaAnimationAPI::GetMaxLeds(ChromaAnimationAPI::GetDeviceName(cPath));
			return maxLeds;
		case EChromaSDKDeviceTypeEnum::DE_2D:
			maxRow = ChromaAnimationAPI::GetMaxRow(ChromaAnimationAPI::GetDeviceName(cPath));
			maxColumn = ChromaAnimationAPI::GetMaxColumn(ChromaAnimationAPI::GetDeviceName(cPath));
			return maxRow * maxColumn;
		}
	}
	return 0;
}

#pragma region Autogenerated keyboard enum implementation

int Extension::ExpGet_RZKEY_ESC() /*!< Esc (VK_ESCAPE) */
{
	return Keyboard::RZKEY::RZKEY_ESC;
}
int Extension::ExpGet_RZKEY_F1() /*!< F1 (VK_F1) */
{
	return Keyboard::RZKEY::RZKEY_F1;
}
int Extension::ExpGet_RZKEY_F2() /*!< F2 (VK_F2) */
{
	return Keyboard::RZKEY::RZKEY_F2;
}
int Extension::ExpGet_RZKEY_F3() /*!< F3 (VK_F3) */
{
	return Keyboard::RZKEY::RZKEY_F3;
}
int Extension::ExpGet_RZKEY_F4() /*!< F4 (VK_F4) */
{
	return Keyboard::RZKEY::RZKEY_F4;
}
int Extension::ExpGet_RZKEY_F5() /*!< F5 (VK_F5) */
{
	return Keyboard::RZKEY::RZKEY_F5;
}
int Extension::ExpGet_RZKEY_F6() /*!< F6 (VK_F6) */
{
	return Keyboard::RZKEY::RZKEY_F6;
}
int Extension::ExpGet_RZKEY_F7() /*!< F7 (VK_F7) */
{
	return Keyboard::RZKEY::RZKEY_F7;
}
int Extension::ExpGet_RZKEY_F8() /*!< F8 (VK_F8) */
{
	return Keyboard::RZKEY::RZKEY_F8;
}
int Extension::ExpGet_RZKEY_F9() /*!< F9 (VK_F9) */
{
	return Keyboard::RZKEY::RZKEY_F9;
}
int Extension::ExpGet_RZKEY_F10() /*!< F10 (VK_F10) */
{
	return Keyboard::RZKEY::RZKEY_F10;
}
int Extension::ExpGet_RZKEY_F11() /*!< F11 (VK_F11) */
{
	return Keyboard::RZKEY::RZKEY_F11;
}
int Extension::ExpGet_RZKEY_F12() /*!< F12 (VK_F12) */
{
	return Keyboard::RZKEY::RZKEY_F12;
}
int Extension::ExpGet_RZKEY_1() /*!< 1 (VK_1) */
{
	return Keyboard::RZKEY::RZKEY_1;
}
int Extension::ExpGet_RZKEY_2() /*!< 2 (VK_2) */
{
	return Keyboard::RZKEY::RZKEY_2;
}
int Extension::ExpGet_RZKEY_3() /*!< 3 (VK_3) */
{
	return Keyboard::RZKEY::RZKEY_3;
}
int Extension::ExpGet_RZKEY_4() /*!< 4 (VK_4) */
{
	return Keyboard::RZKEY::RZKEY_4;
}
int Extension::ExpGet_RZKEY_5() /*!< 5 (VK_5) */
{
	return Keyboard::RZKEY::RZKEY_5;
}
int Extension::ExpGet_RZKEY_6() /*!< 6 (VK_6) */
{
	return Keyboard::RZKEY::RZKEY_6;
}
int Extension::ExpGet_RZKEY_7() /*!< 7 (VK_7) */
{
	return Keyboard::RZKEY::RZKEY_7;
}
int Extension::ExpGet_RZKEY_8() /*!< 8 (VK_8) */
{
	return Keyboard::RZKEY::RZKEY_8;
}
int Extension::ExpGet_RZKEY_9() /*!< 9 (VK_9) */
{
	return Keyboard::RZKEY::RZKEY_9;
}
int Extension::ExpGet_RZKEY_0() /*!< 0 (VK_0) */
{
	return Keyboard::RZKEY::RZKEY_0;
}
int Extension::ExpGet_RZKEY_A() /*!< A (VK_A) */
{
	return Keyboard::RZKEY::RZKEY_A;
}
int Extension::ExpGet_RZKEY_B() /*!< B (VK_B) */
{
	return Keyboard::RZKEY::RZKEY_B;
}
int Extension::ExpGet_RZKEY_C() /*!< C (VK_C) */
{
	return Keyboard::RZKEY::RZKEY_C;
}
int Extension::ExpGet_RZKEY_D() /*!< D (VK_D) */
{
	return Keyboard::RZKEY::RZKEY_D;
}
int Extension::ExpGet_RZKEY_E() /*!< E (VK_E) */
{
	return Keyboard::RZKEY::RZKEY_E;
}
int Extension::ExpGet_RZKEY_F() /*!< F (VK_F) */
{
	return Keyboard::RZKEY::RZKEY_F;
}
int Extension::ExpGet_RZKEY_G() /*!< G (VK_G) */
{
	return Keyboard::RZKEY::RZKEY_G;
}
int Extension::ExpGet_RZKEY_H() /*!< H (VK_H) */
{
	return Keyboard::RZKEY::RZKEY_H;
}
int Extension::ExpGet_RZKEY_I() /*!< I (VK_I) */
{
	return Keyboard::RZKEY::RZKEY_I;
}
int Extension::ExpGet_RZKEY_J() /*!< J (VK_J) */
{
	return Keyboard::RZKEY::RZKEY_J;
}
int Extension::ExpGet_RZKEY_K() /*!< K (VK_K) */
{
	return Keyboard::RZKEY::RZKEY_K;
}
int Extension::ExpGet_RZKEY_L() /*!< L (VK_L) */
{
	return Keyboard::RZKEY::RZKEY_L;
}
int Extension::ExpGet_RZKEY_M() /*!< M (VK_M) */
{
	return Keyboard::RZKEY::RZKEY_M;
}
int Extension::ExpGet_RZKEY_N() /*!< N (VK_N) */
{
	return Keyboard::RZKEY::RZKEY_N;
}
int Extension::ExpGet_RZKEY_O() /*!< O (VK_O) */
{
	return Keyboard::RZKEY::RZKEY_O;
}
int Extension::ExpGet_RZKEY_P() /*!< P (VK_P) */
{
	return Keyboard::RZKEY::RZKEY_P;
}
int Extension::ExpGet_RZKEY_Q() /*!< Q (VK_Q) */
{
	return Keyboard::RZKEY::RZKEY_Q;
}
int Extension::ExpGet_RZKEY_R() /*!< R (VK_R) */
{
	return Keyboard::RZKEY::RZKEY_R;
}
int Extension::ExpGet_RZKEY_S() /*!< S (VK_S) */
{
	return Keyboard::RZKEY::RZKEY_S;
}
int Extension::ExpGet_RZKEY_T() /*!< T (VK_T) */
{
	return Keyboard::RZKEY::RZKEY_T;
}
int Extension::ExpGet_RZKEY_U() /*!< U (VK_U) */
{
	return Keyboard::RZKEY::RZKEY_U;
}
int Extension::ExpGet_RZKEY_V() /*!< V (VK_V) */
{
	return Keyboard::RZKEY::RZKEY_V;
}
int Extension::ExpGet_RZKEY_W() /*!< W (VK_W) */
{
	return Keyboard::RZKEY::RZKEY_W;
}
int Extension::ExpGet_RZKEY_X() /*!< X (VK_X) */
{
	return Keyboard::RZKEY::RZKEY_X;
}
int Extension::ExpGet_RZKEY_Y() /*!< Y (VK_Y) */
{
	return Keyboard::RZKEY::RZKEY_Y;
}
int Extension::ExpGet_RZKEY_Z() /*!< Z (VK_Z) */
{
	return Keyboard::RZKEY::RZKEY_Z;
}
int Extension::ExpGet_RZKEY_NUMLOCK() /*!< Numlock (VK_NUMLOCK) */
{
	return Keyboard::RZKEY::RZKEY_NUMLOCK;
}
int Extension::ExpGet_RZKEY_NUMPAD0() /*!< Numpad 0 (VK_NUMPAD0) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD0;
}
int Extension::ExpGet_RZKEY_NUMPAD1() /*!< Numpad 1 (VK_NUMPAD1) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD1;
}
int Extension::ExpGet_RZKEY_NUMPAD2() /*!< Numpad 2 (VK_NUMPAD2) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD2;
}
int Extension::ExpGet_RZKEY_NUMPAD3() /*!< Numpad 3 (VK_NUMPAD3) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD3;
}
int Extension::ExpGet_RZKEY_NUMPAD4() /*!< Numpad 4 (VK_NUMPAD4) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD4;
}
int Extension::ExpGet_RZKEY_NUMPAD5() /*!< Numpad 5 (VK_NUMPAD5) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD5;
}
int Extension::ExpGet_RZKEY_NUMPAD6() /*!< Numpad 6 (VK_NUMPAD6) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD6;
}
int Extension::ExpGet_RZKEY_NUMPAD7() /*!< Numpad 7 (VK_NUMPAD7) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD7;
}
int Extension::ExpGet_RZKEY_NUMPAD8() /*!< Numpad 8 (VK_NUMPAD8) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD8;
}
int Extension::ExpGet_RZKEY_NUMPAD9() /*!< Numpad 9 (VK_ NUMPAD9*/
{
	return Keyboard::RZKEY::RZKEY_NUMPAD9;
}
int Extension::ExpGet_RZKEY_NUMPAD_DIVIDE() /*!< Divide (VK_DIVIDE) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD_DIVIDE;
}
int Extension::ExpGet_RZKEY_NUMPAD_MULTIPLY() /*!< Multiply (VK_MULTIPLY) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD_MULTIPLY;
}
int Extension::ExpGet_RZKEY_NUMPAD_SUBTRACT() /*!< Subtract (VK_SUBTRACT) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD_SUBTRACT;
}
int Extension::ExpGet_RZKEY_NUMPAD_ADD() /*!< Add (VK_ADD) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD_ADD;
}
int Extension::ExpGet_RZKEY_NUMPAD_ENTER() /*!< Enter (VK_RETURN - Extended) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD_ENTER;
}
int Extension::ExpGet_RZKEY_NUMPAD_DECIMAL() /*!< Decimal (VK_DECIMAL) */
{
	return Keyboard::RZKEY::RZKEY_NUMPAD_DECIMAL;
}
int Extension::ExpGet_RZKEY_PRINTSCREEN() /*!< Print Screen (VK_PRINT) */
{
	return Keyboard::RZKEY::RZKEY_PRINTSCREEN;
}
int Extension::ExpGet_RZKEY_SCROLL() /*!< Scroll Lock (VK_SCROLL) */
{
	return Keyboard::RZKEY::RZKEY_SCROLL;
}
int Extension::ExpGet_RZKEY_PAUSE() /*!< Pause (VK_PAUSE) */
{
	return Keyboard::RZKEY::RZKEY_PAUSE;
}
int Extension::ExpGet_RZKEY_INSERT() /*!< Insert (VK_INSERT) */
{
	return Keyboard::RZKEY::RZKEY_INSERT;
}
int Extension::ExpGet_RZKEY_HOME() /*!< Home (VK_HOME) */
{
	return Keyboard::RZKEY::RZKEY_HOME;
}
int Extension::ExpGet_RZKEY_PAGEUP() /*!< Page Up (VK_PRIOR) */
{
	return Keyboard::RZKEY::RZKEY_PAGEUP;
}
int Extension::ExpGet_RZKEY_DELETE() /*!< Delete (VK_DELETE) */
{
	return Keyboard::RZKEY::RZKEY_DELETE;
}
int Extension::ExpGet_RZKEY_END() /*!< End (VK_END) */
{
	return Keyboard::RZKEY::RZKEY_END;
}
int Extension::ExpGet_RZKEY_PAGEDOWN() /*!< Page Down (VK_NEXT) */
{
	return Keyboard::RZKEY::RZKEY_PAGEDOWN;
}
int Extension::ExpGet_RZKEY_UP() /*!< Up (VK_UP) */
{
	return Keyboard::RZKEY::RZKEY_UP;
}
int Extension::ExpGet_RZKEY_LEFT() /*!< Left (VK_LEFT) */
{
	return Keyboard::RZKEY::RZKEY_LEFT;
}
int Extension::ExpGet_RZKEY_DOWN() /*!< Down (VK_DOWN) */
{
	return Keyboard::RZKEY::RZKEY_DOWN;
}
int Extension::ExpGet_RZKEY_RIGHT() /*!< Right (VK_RIGHT) */
{
	return Keyboard::RZKEY::RZKEY_RIGHT;
}
int Extension::ExpGet_RZKEY_TAB() /*!< Tab (VK_TAB) */
{
	return Keyboard::RZKEY::RZKEY_TAB;
}
int Extension::ExpGet_RZKEY_CAPSLOCK() /*!< Caps Lock(VK_CAPITAL) */
{
	return Keyboard::RZKEY::RZKEY_CAPSLOCK;
}
int Extension::ExpGet_RZKEY_BACKSPACE() /*!< Backspace (VK_BACK) */
{
	return Keyboard::RZKEY::RZKEY_BACKSPACE;
}
int Extension::ExpGet_RZKEY_ENTER() /*!< Enter (VK_RETURN) */
{
	return Keyboard::RZKEY::RZKEY_ENTER;
}
int Extension::ExpGet_RZKEY_LCTRL() /*!< Left Control(VK_LCONTROL) */
{
	return Keyboard::RZKEY::RZKEY_LCTRL;
}
int Extension::ExpGet_RZKEY_LWIN() /*!< Left Window (VK_LWIN) */
{
	return Keyboard::RZKEY::RZKEY_LWIN;
}
int Extension::ExpGet_RZKEY_LALT() /*!< Left Alt (VK_LMENU) */
{
	return Keyboard::RZKEY::RZKEY_LALT;
}
int Extension::ExpGet_RZKEY_SPACE() /*!< Spacebar (VK_SPACE) */
{
	return Keyboard::RZKEY::RZKEY_SPACE;
}
int Extension::ExpGet_RZKEY_RALT() /*!< Right Alt (VK_RMENU) */
{
	return Keyboard::RZKEY::RZKEY_RALT;
}
int Extension::ExpGet_RZKEY_FN() /*!< Function key. */
{
	return Keyboard::RZKEY::RZKEY_FN;
}
int Extension::ExpGet_RZKEY_RMENU() /*!< Right Menu (VK_APPS) */
{
	return Keyboard::RZKEY::RZKEY_RMENU;
}
int Extension::ExpGet_RZKEY_RCTRL() /*!< Right Control (VK_RCONTROL) */
{
	return Keyboard::RZKEY::RZKEY_RCTRL;
}
int Extension::ExpGet_RZKEY_LSHIFT() /*!< Left Shift (VK_LSHIFT) */
{
	return Keyboard::RZKEY::RZKEY_LSHIFT;
}
int Extension::ExpGet_RZKEY_RSHIFT() /*!< Right Shift (VK_RSHIFT) */
{
	return Keyboard::RZKEY::RZKEY_RSHIFT;
}
int Extension::ExpGet_RZKEY_MACRO1() /*!< Macro Key 1 */
{
	return Keyboard::RZKEY::RZKEY_MACRO1;
}
int Extension::ExpGet_RZKEY_MACRO2() /*!< Macro Key 2 */
{
	return Keyboard::RZKEY::RZKEY_MACRO2;
}
int Extension::ExpGet_RZKEY_MACRO3() /*!< Macro Key 3 */
{
	return Keyboard::RZKEY::RZKEY_MACRO3;
}
int Extension::ExpGet_RZKEY_MACRO4() /*!< Macro Key 4 */
{
	return Keyboard::RZKEY::RZKEY_MACRO4;
}
int Extension::ExpGet_RZKEY_MACRO5() /*!< Macro Key 5 */
{
	return Keyboard::RZKEY::RZKEY_MACRO5;
}
int Extension::ExpGet_RZKEY_OEM_1() /*!< ~ (tilde/半角/全角) (VK_OEM_3) */
{
	return Keyboard::RZKEY::RZKEY_OEM_1;
}
int Extension::ExpGet_RZKEY_OEM_2() /*!< -- (minus) (VK_OEM_MINUS) */
{
	return Keyboard::RZKEY::RZKEY_OEM_2;
}
int Extension::ExpGet_RZKEY_OEM_3() /*!< = (equal) (VK_OEM_PLUS) */
{
	return Keyboard::RZKEY::RZKEY_OEM_3;
}
int Extension::ExpGet_RZKEY_OEM_4() /*!< [ (left sqaure bracket) (VK_OEM_4) */
{
	return Keyboard::RZKEY::RZKEY_OEM_4;
}
int Extension::ExpGet_RZKEY_OEM_5() /*!< ] (right square bracket) (VK_OEM_6) */
{
	return Keyboard::RZKEY::RZKEY_OEM_5;
}
int Extension::ExpGet_RZKEY_OEM_6() /*!< \ (backslash) (VK_OEM_5) */
{
	return Keyboard::RZKEY::RZKEY_OEM_6;
}
int Extension::ExpGet_RZKEY_OEM_7() /*!< ; (semi-colon) (VK_OEM_1) */
{
	return Keyboard::RZKEY::RZKEY_OEM_7;
}
int Extension::ExpGet_RZKEY_OEM_8() /*!< ' (apostrophe) (VK_OEM_7) */
{
	return Keyboard::RZKEY::RZKEY_OEM_8;
}
int Extension::ExpGet_RZKEY_OEM_9() /*!<(comma) (VK_OEM_COMMA) */
{
	return Keyboard::RZKEY::RZKEY_OEM_9;
}
int Extension::ExpGet_RZKEY_OEM_10() /*!< . (period) (VK_OEM_PERIOD) */
{
	return Keyboard::RZKEY::RZKEY_OEM_10;
}
int Extension::ExpGet_RZKEY_OEM_11() /*!< / (forward slash) (VK_OEM_2) */
{
	return Keyboard::RZKEY::RZKEY_OEM_11;
}
int Extension::ExpGet_RZKEY_EUR_1() /*!< "#" (VK_OEM_5) */
{
	return Keyboard::RZKEY::RZKEY_EUR_1;
}
int Extension::ExpGet_RZKEY_EUR_2() /*!< \ (VK_OEM_102) */
{
	return Keyboard::RZKEY::RZKEY_EUR_2;
}
int Extension::ExpGet_RZKEY_JPN_1() /*!< ¥ (0xFF) */
{
	return Keyboard::RZKEY::RZKEY_JPN_1;
}
int Extension::ExpGet_RZKEY_JPN_2() /*!< \ (0xC1) */
{
	return Keyboard::RZKEY::RZKEY_JPN_2;
}
int Extension::ExpGet_RZKEY_JPN_3() /*!< 無変換 (VK_OEM_PA1) */
{
	return Keyboard::RZKEY::RZKEY_JPN_3;
}
int Extension::ExpGet_RZKEY_JPN_4() /*!< 変換 (0xFF) */
{
	return Keyboard::RZKEY::RZKEY_JPN_4;
}
int Extension::ExpGet_RZKEY_JPN_5() /*!< ひらがな/カタカナ (0xFF) */
{
	return Keyboard::RZKEY::RZKEY_JPN_5;
}
int Extension::ExpGet_RZKEY_KOR_1() /*!< | (0xFF) */
{
	return Keyboard::RZKEY::RZKEY_KOR_1;
}
int Extension::ExpGet_RZKEY_KOR_2() /*!< (VK_OEM_5) */
{
	return Keyboard::RZKEY::RZKEY_KOR_2;
}
int Extension::ExpGet_RZKEY_KOR_3() /*!< (VK_OEM_102) */
{
	return Keyboard::RZKEY::RZKEY_KOR_3;
}
int Extension::ExpGet_RZKEY_KOR_4() /*!< (0xC1) */
{
	return Keyboard::RZKEY::RZKEY_KOR_4;
}
int Extension::ExpGet_RZKEY_KOR_5() /*!< (VK_OEM_PA1) */
{
	return Keyboard::RZKEY::RZKEY_KOR_5;
}
int Extension::ExpGet_RZKEY_KOR_6() /*!< 한/영 (0xFF) */
{
	return Keyboard::RZKEY::RZKEY_KOR_6;
}
int Extension::ExpGet_RZKEY_KOR_7() /*!< (0xFF) */
{
	return Keyboard::RZKEY::RZKEY_KOR_7;
}
int Extension::ExpGet_RZKEY_INVALID() /*!< Invalid keys. */
{
	return Keyboard::RZKEY::RZKEY_INVALID;
}
#pragma endregion
